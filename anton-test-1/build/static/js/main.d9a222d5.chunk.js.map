{"version":3,"sources":["components/services/data.services.js","components/redux/actions/dataAction.js","components/table/table.js","App.js","components/redux/actions/actionTypes.js","components/redux/reducers/dataReducer.js","components/redux/reducers/rootReducer.js","components/redux/store/configureStore.js","components/layout/layout.js","components/history/history.js","components/routers/routes.js","index.js"],"names":["userService","getData","user","requestOptions","method","url","headers","data","JSON","stringify","axios","then","Styles","styled","div","Table","columns","useTable","initialState","pageIndex","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","className","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","length","type","defaultValue","onChange","e","target","value","Number","style","width","key","mapDispatch","username","password","dispatch","getState","Promise","resolve","reject","success","error","failure","connect","props","items","useEffect","arrModifactionTime","time","unixTimestamp","Date","toUTCString","convertTimestamptoTime","React","useMemo","Header","accessor","collapse","Cell","href","original","comments","values","title","productItemPersistConfig","storage","blacklist","persistReducer","action","item","id","rootReducer","combineReducers","middleware","thunk","configureStore","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","composeEnhancers","createStore","createAppStore","store","persistor","persistStore","Layout","children","createBrowserHistory","Routes","history","path","exact","component","Home","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d9a222d5.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const userService = {\n    getData\n};\n\nfunction getData(user) {\n\n    const requestOptions = {\n        method: 'GET',\n        url: 'https://api.hnpwa.com/v0/news/1.json',\n        headers: { 'Content-Type': 'application/json' },\n        data: JSON.stringify(user)\n    };\n\n    return axios(requestOptions).then(user =>{\n        // localStorage.setItem('user', JSON.stringify(user));\n        return user;\n    });\n}","import * as types from './actionTypes';\nimport {userService} from '../../services/data.services';\n\n\nexport const getData = (username, password) => {\n\n    return (dispatch, getState) =>\n        new Promise(function(resolve, reject) {\n            dispatch(request({ username }));\n\n            userService.getData()\n                .then(\n                    user => {\n                        // dispatch(success(user));\n                        // history.push('/');\n                        resolve(dispatch(success(user)));\n                    },\n                    error => {\n                        // dispatch(failure(error));\n                        reject(dispatch(failure(error)));\n\n                        // dispatch(alertActions.error(error));\n                        // console.log(error)\n                    }\n                );\n        });\n    function request(user) { return { type: types.GET_ITEM_REQUEST, user } }\n    function success(user) { return { type: types.GET_ITEM_SUCCESS, user } }\n    function failure(error) { return { type: types.GET_ITEM_FAILURE, error } }\n}","import styled from \"styled-components\";\nimport {usePagination, useSortBy, useTable} from \"react-table\";\nimport React from \"react\";\n\nconst Styles = styled.div`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n  @media (min-width: 320px) and (max-width: 767px) {\n    margin: 5% 5%;\n  }\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    border-bottom: 1px solid black;\n  }\n\n  table {\n    /* Make sure the inner table is always as wide as needed */\n    width: 100%;\n    border-spacing: 0;\n    @media (min-width: 320px) and (max-width: 767px) {\n       .domain, .time {\n          display: none;\n       }\n    }\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      @media (min-width: 320px) and (max-width: 767px) {\n        border-left: 1px solid black;\n      }\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      width: 1%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n    th{\n       @media (min-width: 320px) and (max-width: 767px) {\n          border-top: 1px solid black;\n        }\n      }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n    input, select{\n      border: 1px solid black;\n    }\n    @media (min-width: 320px) and (max-width: 767px) {\n       span + span{\n         display:none;\n       }\n       span + select{\n         display:none;\n       }\n     }  \n  }\n`\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        page, // Instead of using 'rows', we'll use page,\n        // which has only the rows for the active page\n\n        // The rest of these things are super handy, too ;)\n        canPreviousPage,\n        canNextPage,\n        pageOptions,\n        pageCount,\n        gotoPage,\n        nextPage,\n        previousPage,\n        setPageSize,\n        state: { pageIndex, pageSize },\n    } = useTable(\n        {\n            columns,\n            data,\n            initialState: { pageIndex: 2 },\n        },\n        useSortBy,\n        usePagination\n    )\n\n    // Render the UI for your table\n    return (\n        <Styles>\n            <div className=\"tableWrap\">\n                <table {...getTableProps()}>\n                    <thead>\n                    {headerGroups.map(headerGroup => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map(column => (\n                                <th {...column.getHeaderProps(column.getSortByToggleProps({\n                                    className:  column.className ?   column.className : '',\n                                }))}>\n                                    {column.render('Header')}\n                                    {/* Add a sort direction indicator */}\n                                    <span>\n                    {column.isSorted\n                        ? column.isSortedDesc\n                            ? ' 🔽'\n                            : ' 🔼'\n                        : ''}\n                  </span>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n                    </thead>\n                    <tbody {...getTableBodyProps()}>\n                    {page.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map(cell => {\n                                    return (\n                                        <td\n                                            {...cell.getCellProps({\n                                                className:  cell.column.className ?   cell.column.className : '',\n                                            })}\n                                        >\n                                            {cell.render('Cell')}\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                    </tbody>\n                </table>\n                {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n            </div>\n            <div className=\"pagination\">\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                    {'<<'}\n                </button>{' '}\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                    {'<'}\n                </button>{' '}\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\n                    {'>'}\n                </button>{' '}\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                    {'>>'}\n                </button>{' '}\n                <span>\n          Page{' '}\n                    <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n                <span>\n          | Go to page:{' '}\n                    <input\n                        type=\"number\"\n                        defaultValue={pageIndex + 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            gotoPage(page)\n                        }}\n                        style={{ width: '100px' }}\n                    />\n        </span>{' '}\n                <select\n                    value={pageSize}\n                    onChange={e => {\n                        setPageSize(Number(e.target.value))\n                    }}\n                >\n                    {[10, 20, 30, 40, 50].map(pageSize => (\n                        <option key={pageSize} value={pageSize}>\n                            Show {pageSize}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        </Styles>\n    )\n}\n\nexport default Table;","import React, { useEffect} from 'react'\nimport { connect } from 'react-redux';\nimport {  getData  } from './components/redux/actions/dataAction';\nimport Table from './components/table/table'\n\n\n\n\nfunction App(props) {\n    // props.getData()\n    // const [datas, setDatas] = useState([]);\n    useEffect(() => {\n        props.getData()\n    }, []);\n\n    let arrModifactionTime = props.items.map((i)=>{\n        function convertTimestamptoTime() {\n            let unixTimestamp = i.time;\n            // convert to milliseconds\n            let dateObj = new Date(unixTimestamp * 1000);\n            let utcString = dateObj.toUTCString();\n            // console.log(utcString)\n            return utcString\n            // let time = utcString.slice(-11, -4);\n        }\n        return {...i, time:convertTimestamptoTime()}\n    })\n\n    const columns = React.useMemo(\n\n        () => [\n            {\n                Header: 'Time',\n                accessor: 'time',\n                className: 'time',\n                collapse: true,\n            },\n            {\n                Header: 'Title',\n                accessor: 'title',\n                Cell: ({ row }) => (<a href={row.original.comments}>{row.values.title}</a>),\n                collapse: true\n            },\n            {\n                Header: 'Domain',\n                accessor: 'domain',\n                className: 'domain',\n                collapse: true,\n            },\n        ],\n        []\n    )\n    // const data = React.useMemo(() => makeData(100000), []);\n    // console.log(props.items)\n    return <Table columns={columns} data={arrModifactionTime} />\n}\nfunction mapStateToProps(state, props) {\n    // console.log(state.data.items)\n    return {\n        items: state.data.items\n    };\n}\nconst mapDispatch = {\n    getData\n};\n\nexport default connect(mapStateToProps, mapDispatch)(App);\n\n","export const GET_ITEM_REQUEST = 'GET_ITEM_REQUEST';\nexport const GET_ITEM_SUCCESS = 'GET_ITEM_SUCCESS';\nexport const GET_ITEM_FAILURE = 'GET_ITEM_FAILURE';","import * as types from \"../actions/actionTypes\";\n\n\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist'\n\nconst initialState = {\n    items: [],\n};\nconst productItemList =  (state = initialState, action) => {\n    switch (action.type) {\n        case types.GET_ITEM_SUCCESS :\n            return {\n                ...state,\n                items: action.user.data.map(item => {\n                        return {\n                            ...item,\n                            comments: `https://news.ycombinator.com/item?id=${item.id}`\n                        }\n                })\n            };\n        default:\n            return state;\n    }\n};\n\nconst productItemPersistConfig = {\n    key: 'productItem',\n    storage: storage,\n    blacklist: ['isLoggingIn']\n};\n\nexport default  persistReducer(productItemPersistConfig, productItemList);","import { combineReducers } from 'redux';\nimport data from './dataReducer'\n\nconst rootReducer = combineReducers({\n    data\n});\n\nexport default rootReducer;\n","import rootReducer from \"../reducers/rootReducer\";\nimport thunk from 'redux-thunk'\n// import { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { persistStore } from 'redux-persist'\n// import storage from 'redux-persist/es/storage'\n\n// const loggerMiddleware = createLogger()//if nedd add to middleware;\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = composeEnhancers(\n    applyMiddleware(...middleware),\n)(createStore);\n\n// const config = {\n//   key: 'root',\n//   storage,\n//   blacklist: ['productItemList']\n// };\n\n// const combinedReducer = persistReducer(config, rootReducer);\n\nconst createAppStore = () => {\n    let store = configureStore(rootReducer);\n    let persistor = persistStore(store);\n\n    return { persistor, store }\n};\n\nexport default createAppStore","import React from 'react';\n\n\nconst Layout = ({ children }) => {\n    return (\n        <>\n            {children}\n        </>\n    );\n};\n\nexport default Layout;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport { Switch, Route, Router } from 'react-router-dom';\nimport Layout from '../layout/layout';\nimport Home from '../../App';\nimport history from '../history/history'\n\nconst Routes = (store) => {\n\n    return (\n        <Router history={history}>\n            <Layout>\n                <Switch>\n                    <Route path=\"/\" exact component={Home} />\n                </Switch>\n            </Layout>\n        </Router>\n    );\n};\n\nexport default Routes;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n// import WithAuth from './components/hoc/withAuth';\nimport createAppStore from \"./components/redux/store/configureStore\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport Routes from './components/routers/routes'\n\nconst { persistor, store } = createAppStore()\n\nconst renderApp = () => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <PersistGate loading={null} persistor={persistor}>\n                <BrowserRouter>\n                    {/*<WithAuth>*/}\n                    <Routes store={store} />\n                    <App />\n                    {/*<Routes store={store} />*/}\n                    {/*</WithAuth>*/}\n                </BrowserRouter>\n            </PersistGate>\n        </Provider>,\n        document.getElementById('root'),\n    );\n};\n\nrenderApp();\n"],"sourceRoot":""}