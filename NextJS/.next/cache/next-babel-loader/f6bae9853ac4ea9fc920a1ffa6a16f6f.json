{"ast":null,"code":"import axios from 'axios';\nimport * as types from './action-types';\nimport history from '../../components/history/history'; // import Router from 'next/router';\n\nimport { useRouter } from 'next/router';\nexport var search = function search(value) {\n  return {\n    type: types.SEARCH,\n    value: value\n  };\n};\nexport var searchSuccess = function searchSuccess(data) {\n  return {\n    type: types.GET_SEARCH_SUCCESS,\n    payload: data\n  };\n};\nexport var clearInputValue = function clearInputValue() {\n  return {\n    type: types.CLEAR_INPUT_VALUE\n  };\n};\nexport var ShowFilm = function ShowFilm(data) {\n  return {\n    type: types.SHOW_FILM,\n    payload: data\n  };\n};\nexport var withShowFilm = function withShowFilm(id) {\n  return function (dispatch) {\n    var queryToUrl = id;\n    var url = \"http://api.tvmaze.com/shows/\".concat(queryToUrl);\n    axios.get(url).then(function (_ref) {\n      var data = _ref.data;\n\n      if (data) {\n        dispatch(ShowFilm(data));\n\n        var _router = useRouter(); // router.push({pathname: `/filmDeskription`, query: {id}})\n        // Router.push({pathname: `/film`, query: {id}})\n        // console.log(history)\n\n      }\n    })[\"catch\"](function (err) {});\n  };\n};\nexport var withSearch = function withSearch(query) {\n  return function (dispatch) {\n    var queryToUrl = query;\n    var url = \"http://api.tvmaze.com/search/shows?q=\".concat(queryToUrl);\n    axios.get(url).then(function (_ref2) {\n      var data = _ref2.data;\n\n      if (data) {\n        dispatch(searchSuccess(data));\n        router.push({\n          pathname: \"/film\",\n          query: {\n            id: id\n          }\n        });\n        console.log(history);\n      }\n    })[\"catch\"](function (err) {});\n  };\n};","map":{"version":3,"sources":["/Users/pro/Desktop/test-task/next-js/with-redux-thunk-app/redux/actions/actions.js"],"names":["axios","types","history","useRouter","search","value","type","SEARCH","searchSuccess","data","GET_SEARCH_SUCCESS","payload","clearInputValue","CLEAR_INPUT_VALUE","ShowFilm","SHOW_FILM","withShowFilm","id","dispatch","queryToUrl","url","get","then","router","err","withSearch","query","push","pathname","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;AACA,OAAOC,OAAP,MAAoB,kCAApB,C,CACA;;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,IAAOC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AAC5B,SAAO;AAACC,IAAAA,IAAI,EAAEL,KAAK,CAACM,MAAb;AAAqBF,IAAAA,KAAK,EAALA;AAArB,GAAP;AACH,CAFM;AAGP,OAAO,IAAOG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI,EAAI;AAClC,SAAO;AAACH,IAAAA,IAAI,EAAEL,KAAK,CAACS,kBAAb;AAAiCC,IAAAA,OAAO,EAACF;AAAzC,GAAP;AACH,CAFM;AAIP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO;AAACN,IAAAA,IAAI,EAAEL,KAAK,CAACY;AAAb,GAAP;AACH,CAFM;AAIP,OAAO,IAAOC,QAAQ,GAAG,SAAXA,QAAW,CAAAL,IAAI,EAAI;AAC7B,SAAO;AAACH,IAAAA,IAAI,EAAEL,KAAK,CAACc,SAAb;AAAwBJ,IAAAA,OAAO,EAACF;AAAhC,GAAP;AACH,CAFM;AAIP,OAAO,IAAOO,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE,EAAI;AAC/B,SAAO,UAACC,QAAD,EAAc;AACjB,QAAMC,UAAU,GAAGF,EAAnB;AACA,QAAMG,GAAG,yCAAkCD,UAAlC,CAAT;AAEAnB,IAAAA,KAAK,CAACqB,GAAN,CAAUD,GAAV,EACKE,IADL,CACU,gBAAY;AAAA,UAAVb,IAAU,QAAVA,IAAU;;AACd,UAAGA,IAAH,EAAS;AACLS,QAAAA,QAAQ,CAACJ,QAAQ,CAACL,IAAD,CAAT,CAAR;;AACA,YAAMc,OAAM,GAAGpB,SAAS,EAAxB,CAFK,CAGL;AACA;AACA;;AACH;AACJ,KATL,WAUW,UAAAqB,GAAG,EAAI,CAEb,CAZL;AAaH,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AACjC,SAAO,UAACR,QAAD,EAAc;AACjB,QAAMC,UAAU,GAAGO,KAAnB;AACA,QAAMN,GAAG,kDAA2CD,UAA3C,CAAT;AAEAnB,IAAAA,KAAK,CAACqB,GAAN,CAAUD,GAAV,EACKE,IADL,CACU,iBAAY;AAAA,UAAVb,IAAU,SAAVA,IAAU;;AACd,UAAGA,IAAH,EAAS;AACLS,QAAAA,QAAQ,CAACV,aAAa,CAACC,IAAD,CAAd,CAAR;AACAc,QAAAA,MAAM,CAACI,IAAP,CAAY;AAACC,UAAAA,QAAQ,SAAT;AAAoBF,UAAAA,KAAK,EAAE;AAACT,YAAAA,EAAE,EAAFA;AAAD;AAA3B,SAAZ;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY5B,OAAZ;AACH;AACJ,KAPL,WAQW,UAAAsB,GAAG,EAAI,CAEb,CAVL;AAWH,GAfD;AAgBH,CAjBM","sourcesContent":["import axios from 'axios';\nimport * as types from './action-types';\nimport history from '../../components/history/history'\n// import Router from 'next/router';\nimport { useRouter } from 'next/router'\n\nexport const  search = value => {\n    return {type: types.SEARCH, value};\n}\nexport const  searchSuccess = data => {\n    return {type: types.GET_SEARCH_SUCCESS, payload:data};\n}\n\nexport const clearInputValue = () => {\n    return {type: types.CLEAR_INPUT_VALUE}\n}\n\nexport const  ShowFilm = data => {\n    return {type: types.SHOW_FILM, payload:data};\n}\n\nexport const  withShowFilm = id => {\n    return (dispatch) => {\n        const queryToUrl = id;\n        const url = `http://api.tvmaze.com/shows/${queryToUrl}`;\n\n        axios.get(url)\n            .then(({data}) => {\n                if(data) {\n                    dispatch(ShowFilm(data))\n                    const router = useRouter()\n                    // router.push({pathname: `/filmDeskription`, query: {id}})\n                    // Router.push({pathname: `/film`, query: {id}})\n                    // console.log(history)\n                }\n            })\n            .catch(err => {\n\n            });\n    }\n}\n\nexport const withSearch = (query) => {\n    return (dispatch) => {\n        const queryToUrl = query;\n        const url = `http://api.tvmaze.com/search/shows?q=${queryToUrl}`;\n\n        axios.get(url)\n            .then(({data}) => {\n                if(data) {\n                    dispatch(searchSuccess(data))\n                    router.push({pathname: `/film`, query: {id}})\n                    console.log(history)\n                }\n            })\n            .catch(err => {\n\n            });\n    }\n};"]},"metadata":{},"sourceType":"module"}