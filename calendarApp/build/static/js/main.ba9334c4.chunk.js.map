{"version":3,"sources":["../../my-app/src/serviceWorker.js","../../my-app/src/components/WeekDays.js","../../my-app/src/components/UI/Button.js","../../my-app/src/components/ChangeMonthButton.js","../../my-app/src/components/CalendarHeader.js","../../my-app/src/components/Day.js","../../my-app/src/components/Reminder.js","../../my-app/src/components/ReminderForm.js","../../my-app/src/store/actions/reminders.js","../../my-app/src/store/actions/actionTypes.js","../../my-app/src/components/Month.js","../../my-app/src/components/Calendar.js","../../my-app/src/store/actions/calendar.js","../../my-app/src/store/reducers/util.js","../../my-app/src/store/reducers/rootReducer.js","../../my-app/src/styles/index.js","../../my-app/src/index.js"],"names":["Boolean","window","location","hostname","match","WeekMenu","styled","ul","_templateObject","WeekDay","li","_templateObject2","WeekDays","react_default","a","createElement","Button","button","Button_templateObject","ChangeMonthButton","_ref","click","children","UI_Button","onClick","Wrapper","div","CalendarHeader_templateObject","CalendarHeader","props","prev","next","date","components_ChangeMonthButton","aria-label","format","DayWrapper","Day_templateObject","isToday","ReminderButton","Day_templateObject2","Day","empty","createReminder","Edit","Reminder_templateObject","Reminder_templateObject2","colour","Reminder","time","title","openReminderForm","Reminder_Wrapper","ReminderForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputChangedHandler","event","id","reminder","objectSpread","state","defineProperty","target","value","setState","onCreateReminder","dayId","uuid","initialState","closeModal","updateReminder","onUpdateReminder","deleteReminder","onDeleteReminder","reminderFormHandler","setReminderColour","_this2","Backdrop","Modal","CloseButton","Form","className","htmlFor","onChange","type","placeholder","CircleWrapper","map","Circle","key","SubmitButton","DeleteButton","Component","form","ReminderForm_templateObject","ReminderForm_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","connect","dispatch","actions","Month","reminderFormOpen","toggleReminderForm","days","range","length","padding","Array","getDay","fill","concat","toConsumableArray","day","formattedDay","reminders","r","components_Reminder","components_Day","Reminders","reminderForm","components_ReminderForm","show","react","Month_Wrapper","Month_templateObject","Month_templateObject2","Calendar","_this$props","onSetNextMonth","onSetPrevMonth","currentMonth","components_CalendarHeader","components_WeekDays","components_Month","month","getMonthRange","eachDay","startOfMonth","endOfMonth","getPrevOrNextRange","monthRange","dateInCurrentRange","dateInRange","addMonths","subMonths","Date","currentMonthIndex","year","0","reducer","arguments","undefined","action","_objectSpread2","nextMonthIndex","updatedYear","_objectSpread3","updatedMonth","updatedReminders","filter","GlobalStyle","createGlobalStyle","styles_templateObject","normalize","store","createStore","rootReducer","composeWithDevTools","app","es","styles","components_Calendar","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba9334c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst WeekDays = () => (\n    <WeekMenu>\n        <WeekDay>Sun</WeekDay>\n        <WeekDay>Mon</WeekDay>\n        <WeekDay>Tue</WeekDay>\n        <WeekDay>Wed</WeekDay>\n        <WeekDay>Thu</WeekDay>\n        <WeekDay>Fri</WeekDay>\n        <WeekDay>Sat</WeekDay>\n    </WeekMenu>\n);\n\nconst WeekMenu = styled.ul`\n    list-style: none;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    margin: 0;\n    padding: 0;\n    font-size: 1.2rem;\n    background: #c80a0a57;\n`;\n\nconst WeekDay = styled.li`\n    text-align: center;\n    outline: 1px inset;\n    padding: 10px 0;\n`;\n\nexport default WeekDays;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n    font-size: 18px;\n    font-weight: 600;\n    position: relative;\n    cursor: pointer;\n    display: inline-block;\n    transition: 0.3s ease-out;\n    color: #fff;\n    text-align: center;\n    border: none;\n    border-radius: 50%;\n    height: 36px;\n    line-height: 36px;\n    padding: 0 16px;\n    background-color: #26a69a;\n    &:hover {\n        background-color: #2bbbad;\n    }\n`;\n\nexport default Button;\n","import React from 'react';\nimport Button from './UI/Button';\n\nconst ChangeMonthButton = ({ click, children }) => <Button onClick={click}>{children}</Button>;\n\nexport default ChangeMonthButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\nimport ChangeMonthButton from './ChangeMonthButton';\n\nconst CalendarHeader = props => {\n    const { prev, next, date } = props;\n    return (\n        <Wrapper>\n            <ChangeMonthButton click={prev} aria-label='Previous Month'>\n                {'<'}\n            </ChangeMonthButton>\n            {format(date, 'MMMM YYYY')}\n            <ChangeMonthButton click={next} aria-label='Next Month'>\n                {'>'}\n            </ChangeMonthButton>\n        </Wrapper>\n    );\n};\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    background: #bfccc847;\n    padding: 20px 0;\n    font-size: 2rem;\n    outline: 1px inset;\n`;\n\nexport default CalendarHeader;\n","import styled from 'styled-components';\nimport React from 'react';\nimport Button from './UI/Button';\n\nconst DayWrapper = styled.div`\n    font-weight: bold;\n    outline: 1px inset;\n    display: flex;\n    flex-flow: column;\n    justify-content: start;\n    align-items: start;\n    padding: 20px;\n    position: relative;\n    font-size: 1.2rem;\n    background-color: ${props => (props.isToday ? '#ebf58e70' : '#bfccc847')};\n`;\n\nconst ReminderButton = styled(Button)`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background-color: #b659aee0;\n    &:hover {\n        background-color: #b659aec7;\n    }\n`;\n\nconst Day = props => {\n    const { empty, children, isToday, createReminder } = props;\n    return (\n        <DayWrapper isToday={isToday}>\n            {!empty ? <ReminderButton onClick={createReminder}>+</ReminderButton> : null}\n            {children}\n        </DayWrapper>\n    );\n};\n\nexport default Day;\n","import styled from 'styled-components';\nimport React from 'react';\n\nconst Edit = styled.div`\n    position: absolute;\n    bottom: 5px;\n    right: 5px;\n    font-size: 1rem;\n    opacity: 0;\n    transition: all 0.3s linear;\n`;\n\nconst Wrapper = styled.div`\n    background-color: ${props => (props.colour ? props.colour : '#bfccc847')};\n    display: inline-block;\n    width: 100%;\n    padding: 5px 10px;\n    font-size: 0.8rem;\n    color: #eee;\n    position: relative;\n    cursor: pointer;\n    &:hover ${Edit} {\n        opacity: 1;\n    }\n`;\n\nconst Reminder = props => {\n    const { colour, time, title, openReminderForm } = props;\n    return (\n        <Wrapper colour={colour} onClick={openReminderForm}>\n            <header>{title}</header>\n            <p>Time: {time}</p>\n            <Edit>🖊</Edit>\n        </Wrapper>\n    );\n};\n\nexport default Reminder;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport uuid from 'uuid';\nimport Button from './UI/Button';\nimport * as actions from '../store/actions';\n\nclass ReminderForm extends Component {\n    constructor(props) {\n        super(props);\n        this.initialState = {\n            reminder: {\n                title: '',\n                time: '',\n                colour: '',\n                id: '',\n            },\n        };\n        this.state = this.initialState;\n    }\n\n    componentDidMount() {\n        // initialize state for reminder from props if editing\n        if (this.props.reminder) {\n            this.setState({ reminder: this.props.reminder });\n        }\n    }\n\n    inputChangedHandler = (event, id) => {\n        const reminder = {\n            ...this.state.reminder,\n            [id]: event.target.value,\n        };\n        this.setState({ reminder });\n    };\n\n    createReminder = () => {\n        this.props.onCreateReminder(this.props.dayId, {\n            ...this.state.reminder,\n            id: uuid(),\n        });\n        // reset state after creating reminder\n        this.setState(this.initialState);\n        this.props.closeModal();\n    };\n\n    updateReminder = () => {\n        this.props.onUpdateReminder(this.props.dayId, this.state.reminder);\n        this.setState(this.initialState);\n        this.props.closeModal();\n    };\n\n    deleteReminder = () => {\n        this.props.onDeleteReminder(this.props.dayId, this.state.reminder);\n        this.setState(this.initialState);\n        this.props.closeModal();\n    };\n\n    reminderFormHandler = () => {\n        // if opened in 'edit' mode\n        if (this.props.reminder) {\n            this.updateReminder();\n        } else {\n            this.createReminder();\n        }\n    };\n\n    setReminderColour = colour => {\n        this.setState({\n            reminder: {\n                ...this.state.reminder,\n                colour,\n            },\n        });\n    };\n\n    render() {\n        const colours = ['#2643a6', '#cb496e', '#c45fcb', '#b67f5c'];\n\n        return (\n            <Backdrop>\n                <Modal>\n                    <CloseButton onClick={this.props.closeModal}>x</CloseButton>\n                    <Form>\n                        <h3>Add new reminder</h3>\n                        <label className='element-wrapper' htmlFor='title'>\n                            <span>Reminder title</span>\n                            <input\n                                onChange={event => this.inputChangedHandler(event, 'title')}\n                                type='text'\n                                id='title'\n                                placeholder='Add a title'\n                                value={this.state.reminder.title}\n                            />\n                        </label>\n                        <label className='element-wrapper' htmlFor='time'>\n                            <span>Time</span>\n                            <input\n                                onChange={event => this.inputChangedHandler(event, 'time')}\n                                type='time'\n                                id='time'\n                                value={this.state.reminder.time}\n                            />\n                        </label>\n                        <div className='element-wrapper'>\n                            <span>Choose reminder colour</span>\n                            <CircleWrapper>\n                                {colours.map(colour => (\n                                    <Circle\n                                        type='button'\n                                        onClick={() => this.setReminderColour(colour)}\n                                        colour={colour}\n                                        key={colour}\n                                    />\n                                ))}\n                            </CircleWrapper>\n                        </div>\n                        <SubmitButton type='button' onClick={this.reminderFormHandler}>\n                            Submit\n                        </SubmitButton>\n                        {this.props.reminder ? (\n                            <DeleteButton type='button' onClick={this.deleteReminder}>\n                                Delete\n                            </DeleteButton>\n                        ) : null}\n                    </Form>\n                </Modal>\n            </Backdrop>\n        );\n    }\n}\n\nconst Form = styled.form`\n    padding: 50px;\n    display: flex;\n    flex-direction: column;\n    place-items: center center;\n    > .element-wrapper {\n        display: block;\n        margin-bottom: 10px;\n        input,\n        span {\n            display: block;\n            margin-bottom: 15px;\n        }\n        input {\n            min-width: 300px;\n            color: #000;\n            border: 1px solid #f3f3f3;\n            padding: 10px 14px;\n            line-height: normal;\n            letter-spacing: inherit;\n            border-radius: 0;\n            box-shadow: none;\n            background-color: #f3f3f3;\n        }\n    }\n`;\n\nconst SubmitButton = styled(Button)`\n    border-radius: 2px;\n    font-size: 1rem;\n    padding: 15px 20px;\n    line-height: auto;\n    height: auto;\n    letter-spacing: 2px;\n    margin-bottom: 10px;\n    width: 200px;\n`;\n\nconst DeleteButton = styled(SubmitButton)`\n    background-color: tomato;\n    &:hover {\n        background-color: red;\n    }\n`;\n\nconst Modal = styled.div`\n    position: fixed;\n    z-index: 999;\n    background-color: #dfdfe9;\n    box-shadow: 1px 1px 9px 3px #000000ad;\n    width: 50%;\n    height: 50%;\n    padding: 16px;\n    margin: auto;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    transition: all 0.5s ease-in-out;\n    display: flex;\n    justify-content: center;\n    place-items: center center;\n`;\n\nconst Backdrop = styled.div`\n    width: 100%;\n    height: 100%;\n    position: fixed;\n    z-index: 100;\n    left: 0;\n    top: 0;\n    background-color: rgba(0, 0, 0, 0.5);\n    transition: all 5s ease-in-out;\n`;\n\nconst CloseButton = styled(Button)`\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background-color: tomato;\n    &:hover {\n        background-color: #ff4747;\n    }\n`;\n\nconst Circle = styled(Button)`\n    background-color: ${props => props.colour};\n    width: 36px;\n    &:hover {\n        background-color: ${props => props.colour};\n    }\n`;\n\nconst CircleWrapper = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    margin-bottom: 20px;\n`;\nconst mapDispatchToProps = dispatch => ({\n    onCreateReminder: (dayId, reminder) => dispatch(actions.createReminder(dayId, reminder)),\n    onUpdateReminder: (dayId, reminder) => dispatch(actions.updateReminder(dayId, reminder)),\n    onDeleteReminder: (dayId, reminder) => dispatch(actions.deleteReminder(dayId, reminder)),\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(ReminderForm);\n","import * as actionTypes from './actionTypes';\n\nexport const createReminder = (dayId, reminder) => ({\n    type: actionTypes.CREATE_REMINDER,\n    dayId,\n    reminder,\n});\n\nexport const deleteReminder = (dayId, reminder) => ({\n    type: actionTypes.DELETE_REMINDER,\n    dayId,\n    reminder,\n});\n\nexport const updateReminder = (dayId, reminder) => ({\n    type: actionTypes.UPDATE_REMINDER,\n    dayId,\n    reminder,\n});\n","export const SET_NEXT_MONTH = 'SET_NEXT_MONTH';\nexport const SET_PREV_MONTH = 'SET_PREV_MONTH';\n\nexport const CREATE_REMINDER = 'CREATE_REMINDER';\nexport const UPDATE_REMINDER = 'UPDATE_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\n","import React, { Component, Fragment } from 'react';\nimport { isToday, getDay, format } from 'date-fns';\nimport uuid from 'uuid';\nimport styled from 'styled-components';\nimport Day from './Day';\nimport Reminder from './Reminder';\nimport ReminderForm from './ReminderForm';\n\nclass Month extends Component {\n    state = {\n        reminderFormOpen: false,\n        dayId: null,\n        reminder: null,\n    };\n\n    toggleReminderForm = dayId => {\n        this.setState({\n            reminderFormOpen: !this.state.reminderFormOpen,\n            dayId,\n        });\n        if (this.state.reminder) {\n            // reset reminder prop so ReminderForm opens fresh next time\n            this.setState({ reminder: null });\n        }\n    };\n\n    openReminderForm = (dayId, reminder) => {\n        this.setState({ reminder });\n        this.toggleReminderForm(dayId);\n    };\n\n    render() {\n        let days = null;\n        const { range } = this.props;\n        if (range.length) {\n            const padding = Array(getDay(range[0].date)).fill(null);\n            const paddedRange = [...padding, ...range];\n            days = paddedRange.map(day => {\n                if (day) {\n                    const formattedDay = format(day.date, 'D');\n                    const reminders = day.reminders.map(r => (\n                        <Reminder\n                            openReminderForm={() => this.openReminderForm(day.id, r)}\n                            key={r.id}\n                            title={r.title}\n                            colour={r.colour}\n                            time={r.time}\n                        />\n                    ));\n                    return (\n                        <Day\n                            createReminder={() => this.toggleReminderForm(day.id)}\n                            key={day.id}\n                            isToday={isToday(day.date)}\n                        >\n                            {formattedDay}\n                            <Reminders>{reminders}</Reminders>\n                        </Day>\n                    );\n                }\n                // empty component\n                return <Day empty key={uuid()} />;\n            });\n        }\n        let reminderForm = null;\n        if (this.state.reminderFormOpen) {\n            reminderForm = (\n                <ReminderForm\n                    closeModal={this.toggleReminderForm}\n                    show={this.state.reminderFormOpen}\n                    dayId={this.state.dayId}\n                    reminder={this.state.reminder}\n                />\n            );\n        }\n        return (\n            <Fragment>\n                {reminderForm}\n                <Wrapper>{days}</Wrapper>\n            </Fragment>\n        );\n    }\n}\n\nconst Wrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(6, 200px);\n`;\n\nconst Reminders = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n`;\n\nexport default Month;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions';\nimport WeekDays from './WeekDays';\nimport CalendarHeader from './CalendarHeader';\nimport Month from './Month';\n\nclass Calendar extends Component {\n    render() {\n        const { onSetNextMonth, onSetPrevMonth, currentMonth } = this.props;\n        return (\n            <div>\n                <CalendarHeader\n                    next={onSetNextMonth}\n                    prev={onSetPrevMonth}\n                    date={currentMonth[0].date}\n                />\n                <WeekDays />\n                <Month range={currentMonth} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    currentMonth: state.month,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSetNextMonth: () => dispatch(actions.setNextMonth()),\n    onSetPrevMonth: () => dispatch(actions.setPrevMonth()),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Calendar);\n","import * as actionTypes from './actionTypes';\n\nexport const setNextMonth = () => ({\n    type: actionTypes.SET_NEXT_MONTH,\n});\n\nexport const setPrevMonth = () => ({\n    type: actionTypes.SET_PREV_MONTH,\n});\n","import { eachDay, startOfMonth, endOfMonth, addMonths, subMonths } from 'date-fns';\nimport uuid from 'uuid';\n\n/**\n * getMonthRange - Get an array of all the dates in a given month\n *\n * @param {Date} date - Date in the month whose range we're trying to get\n * @returns {Date[]}\n */\nexport const getMonthRange = date =>\n    eachDay(startOfMonth(date), endOfMonth(date)).map(day => ({\n        date: day,\n        id: uuid(),\n        reminders: [],\n    }));\n\n/**\n * getPrevOrNextRange - Get an array of all the dates in the previous or next month\n *\n * @param {Date[]} monthRange - The month range to check against\n * @param {String} time - 'next' or 'prev' month range to return\n * @returns {Date[]}\n */\nexport const getPrevOrNextRange = (monthRange, time) => {\n    // Take the first day of the range passed\n    const dateInCurrentRange = monthRange[0].date;\n    let dateInRange = null;\n    if (time === 'next') {\n        dateInRange = addMonths(dateInCurrentRange, 1);\n    }\n    if (time === 'prev') {\n        dateInRange = subMonths(dateInCurrentRange, 1);\n    }\n    return getMonthRange(dateInRange);\n};\n","import { getMonthRange, getPrevOrNextRange } from './util';\nimport * as actionTypes from '../actions/actionTypes';\n\n// initialize the current month from today's date\nconst currentMonth = getMonthRange(new Date());\n\nconst initialState = {\n    currentMonthIndex: 0,\n    month: currentMonth,\n    year: { 0: currentMonth },\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_NEXT_MONTH: {\n            const nextMonthIndex = state.currentMonthIndex + 1;\n\n            const updatedYear = {\n                ...state.year,\n                // make sure current month is saved before updating state\n                [state.currentMonthIndex]: state.month,\n                [nextMonthIndex]: state.year[nextMonthIndex]\n                    ? state.year[nextMonthIndex]\n                    : getPrevOrNextRange(state.month, 'next'),\n            };\n\n            return {\n                ...state,\n                currentMonthIndex: nextMonthIndex,\n                month: updatedYear[nextMonthIndex],\n                year: updatedYear,\n            };\n        }\n        case actionTypes.SET_PREV_MONTH: {\n            const nextMonthIndex = state.currentMonthIndex - 1;\n\n            const updatedYear = {\n                ...state.year,\n                // make sure current month is saved before updating state\n                [state.currentMonthIndex]: state.month,\n                [nextMonthIndex]: state.year[nextMonthIndex]\n                    ? state.year[nextMonthIndex]\n                    : getPrevOrNextRange(state.month, 'prev'),\n            };\n\n            return {\n                ...state,\n                currentMonthIndex: nextMonthIndex,\n                month: updatedYear[nextMonthIndex],\n                year: updatedYear,\n            };\n        }\n        case actionTypes.CREATE_REMINDER: {\n            const { reminder, dayId } = action;\n\n            const updatedMonth = state.month.map(day => {\n                if (day.id === dayId) {\n                    return {\n                        ...day,\n                        reminders: day.reminders.concat(reminder),\n                    };\n                }\n                return day;\n            });\n\n            const updatedYear = {\n                ...state.year,\n                [state.currentMonthIndex]: updatedMonth,\n            };\n\n            return {\n                ...state,\n                month: updatedMonth,\n                year: updatedYear,\n            };\n        }\n        case actionTypes.UPDATE_REMINDER: {\n            const { reminder, dayId } = action;\n\n            const updatedMonth = state.month.map(day => {\n                if (day.id === dayId) {\n                    // find the reminder to update\n                    const updatedReminders = day.reminders.map(r => {\n                        if (r.id === reminder.id) {\n                            return reminder;\n                        }\n                        return r;\n                    });\n                    // return the now updated day\n                    return {\n                        ...day,\n                        reminders: updatedReminders,\n                    };\n                }\n                return day;\n            });\n\n            const updatedYear = {\n                ...state.year,\n                [state.currentMonthIndex]: updatedMonth,\n            };\n\n            return {\n                ...state,\n                month: updatedMonth,\n                year: updatedYear,\n            };\n        }\n        case actionTypes.DELETE_REMINDER: {\n            const { reminder, dayId } = action;\n\n            const updatedMonth = state.month.map(day => {\n                if (day.id === dayId) {\n                    // return reminder array without the one being deleted\n                    const updatedReminders = day.reminders.filter(r => r.id !== reminder.id);\n                    // return the now updated day\n                    return {\n                        ...day,\n                        reminders: updatedReminders,\n                    };\n                }\n                return day;\n            });\n\n            const updatedYear = {\n                ...state.year,\n                [state.currentMonthIndex]: updatedMonth,\n            };\n\n            return {\n                ...state,\n                month: updatedMonth,\n                year: updatedYear,\n            };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import { normalize } from 'styled-normalize';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  ${normalize}\n\n    body {\n        margin: 0;\n        padding: 0;\n        font-family: 'Helvetica', sans-serif;\n        font-size: 1.5rem;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        padding: 20px;\n    }\n    * {\n      box-sizing: border-box;\n    }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport * as serviceWorker from './serviceWorker';\nimport Calendar from './components/Calendar';\nimport rootReducer from './store/reducers/rootReducer';\nimport GlobalStyle from './styles';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nconst app = (\n    <Provider store={store}>\n        <GlobalStyle />\n        <Calendar />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}